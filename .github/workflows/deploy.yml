name: Deploy Backend to EC2 (Docker + ECR)

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Make gradlew executable
        working-directory: ./backend
        run: chmod +x ./gradlew

      # application.properties 복원 (이미지에 굽는 임시 방식; 추후 env/외부화 권장)
      - name: Restore application.properties
        run: |
          mkdir -p ./backend/src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./backend/src/main/resources/application.properties

      # Firebase 서비스 키(base64) 복원 (WAR 내부 포함)
      - name: Restore Firebase service key
        run: |
          mkdir -p ./backend/src/main/resources/firebase
          echo "${{ secrets.FIREBASE_SERVICE_KEY_BASE64_ENCODE }}" \
            | base64 -d > ./backend/src/main/resources/firebase/nbtrip-push-adminsdk.json

      # WAR 빌드(테스트 제외)
      - name: Build WAR (no tests)
        working-directory: ./backend
        run: ./gradlew clean build -x test

      # ---- AWS/ECR ----
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 & 푸시 (ECR: nbtrip-server)
      - name: Build & Push Image
        run: |
          ECR=${{ steps.login-ecr.outputs.registry }}
          IMAGE=$ECR/nbtrip-server
          TAG=${{ github.sha }}
          docker build -t $IMAGE:$TAG -t $IMAGE:latest ./backend
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest

      # ---- EC2 배포 ----
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            ECR="${{ steps.login-ecr.outputs.registry }}"
            IMAGE="$ECR/nbtrip-server"
            TAG="${{ github.sha }}"

            # (EC2 역할에 ECR Pull 권한 없으면 로그인 필요)
            aws ecr get-login-password --region ap-northeast-2 \
              | docker login --username AWS --password-stdin "$ECR"

            # 기존 컨테이너/호스트 Tomcat 정리(포트 충돌 방지)
            docker rm -f backend || true
            sudo systemctl stop tomcat || true
            sudo systemctl disable tomcat || true

            # 최신 이미지 pull & 실행
            docker pull "$IMAGE:$TAG"
            docker run -d --name backend \
              --restart unless-stopped \
              -e SPRING_PROFILES_ACTIVE=prod \
              -p 127.0.0.1:8080:8080 \
              "$IMAGE:$TAG"

            # 헬스체크 (Actuator 없으면 간단 엔드포인트로 변경)
            sleep 3
            curl -fsS http://127.0.0.1:8080/ || (docker logs --tail=200 backend && exit 1)
