<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.scoula.member.mapper.MemberMapper">
    <!-- MemberVO 결과 매핑 -->
    <resultMap id="memberResultMap" type="org.scoula.member.domain.MemberVO">
        <id property="userId" column="user_id" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="nickname" column="nickname" />
        <result property="name" column="name" />
        <result property="phoneNumber" column="phone_number" />
        <result property="fcmToken" column="fcm_token" />
        <result property="emailVerified" column="email_verified" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
    </resultMap>

    <!-- 회원 정보 저장 -->
    <insert id="insertMember" parameterType="org.scoula.member.domain.MemberVO" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO users (email, password, nickname, name, phone_number, fcm_token, email_verified, created_at, updated_at)
        VALUES (#{email}, #{password}, #{nickname}, #{name}, #{phoneNumber}, #{fcmToken}, #{emailVerified}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- email로 회원 조회 -->
    <select id="findByEmail" parameterType="string" resultMap="memberResultMap">
        SELECT user_id, email, password, nickname, name, phone_number, fcm_token, email_verified, created_at, updated_at
        FROM users
        WHERE email = #{email}
    </select>

    <!-- userId로 회원 조회 -->
    <select id="findById" parameterType="int" resultMap="memberResultMap">
        SELECT user_id, email, password, nickname, name, phone_number, fcm_token, email_verified, created_at, updated_at
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- userId로 회원 닉네임 조회 -->
    <select id="findNicknameById" parameterType="java.lang.Integer" resultType="string">
        SELECT nickname
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- nickname으로 회원 조회 -->
    <select id="findUserIdByNickname" parameterType="string" resultType="java.lang.Integer">
        SELECT user_id
        FROM users
        WHERE nickname = #{nickname}
    </select>

    <!-- 이메일 존재 여부 확인 -->
    <select id="existsByEmail" parameterType="string" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 닉네임 존재 여부 확인 -->
    <select id="existsByNickname" parameterType="string" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE nickname = #{nickname}
    </select>

    <!-- 회원 ID 존재 여부 확인 -->
    <select id="existsById" parameterType="int" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- 닉네임으로 회원 검색 -->
    <select id="searchUserByNickname" resultType="org.scoula.member.domain.MemberVO">
        SELECT *
        FROM users
        WHERE nickname LIKE CONCAT('%', #{nickname}, '%')
    </select>

    <!-- 회원 정보 수정 -->
    <update id="updateMember" parameterType="org.scoula.member.domain.MemberVO">
        UPDATE users
        SET
            nickname = #{nickname},
            name = #{name},
            phone_number = #{phoneNumber},
            updated_at = #{updatedAt}
        WHERE user_id = #{userId}
    </update>

    <!-- 비밀번호 변경 -->
    <update id="updatePassword">
        UPDATE users
        SET password = #{password},
            updated_at = #{updatedAt}
        WHERE user_id = #{userId}
    </update>

    <!-- FCM 토큰 업데이트 -->
    <update id="updateFcmToken">
        UPDATE users
        SET fcm_token = #{fcmToken},
            updated_at = #{updatedAt}
        WHERE user_id = #{userId}
    </update>

    <!-- 이메일 인증 상태 업데이트 -->
    <update id="updateEmailVerified">
        UPDATE users
        SET email_verified = #{verified}, updated_at = NOW()
        WHERE email = #{email}
    </update>
</mapper>