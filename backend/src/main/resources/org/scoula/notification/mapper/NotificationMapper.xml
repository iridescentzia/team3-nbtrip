<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "--//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.scoula.notification.mapper.NotificationMapper">

    <!-- 1. 전체 알림 -->
    <select id="findAllByUserId" resultType="org.scoula.notification.domain.NotificationVO">
        SELECT n.notification_id AS notificationId,
               n.user_id AS userId,
               n.from_user_id AS fromUserId,
               u.nickname AS fromUserNickname,
               n.trip_id AS tripId,
               t.trip_name AS tripName,
               tm.member_status AS memberStatus,
               n.payment_id AS paymentId,
               p.amount AS amount,
               COALESCE(m.merchant_name, p.memo) AS merchantName,
               p.payment_type AS paymentType,
               n.notification_type AS notificationType,
               CASE
                WHEN n.notification_type = 'TRANSACTION' AND n.payment_id IS NOT NULL
                    AND EXISTS (
                        SELECT 1 FROM notification n2
                        WHERE n2.payment_id = n.payment_id
                        AND n2.user_id   = n.user_id
                        AND n2.trip_id   = n.trip_id
                        AND n2.notification_type = 'TRANSACTION'
                        AND n2.notification_id &lt; n.notification_id
                    ) THEN 'UPDATE'
                   WHEN n.notification_type = 'TRANSACTION' THEN 'CREATE'
                   WHEN n.notification_type = 'SETTLEMENT'
                       AND EXISTS (
                           SELECT 1
                           FROM settlement s2
                           WHERE s2.trip_id = n.trip_id
                             AND s2.sender_id = n.from_user_id
                             AND s2.settlement_status = 'COMPLETED'
                       ) THEN 'SEND'
                   ELSE NULL
                   END AS actionType,
               n.is_read AS isRead,
               n.send_at AS sendAt
        FROM notification n
                 LEFT JOIN users u ON n.from_user_id = u.user_id
                 LEFT JOIN trip t ON n.trip_id = t.trip_id
                 LEFT JOIN trip_member tm ON n.trip_id = tm.trip_id AND tm.user_id = #{userId}
                 LEFT JOIN payment p ON n.payment_id = p.payment_id
                 LEFT JOIN merchant m ON p.merchant_id = m.merchant_id
                 LEFT JOIN settlement s
                           ON s.trip_id = n.trip_id
                               AND s.sender_id = n.from_user_id
                               AND s.receiver_id = n.user_id
        WHERE
            (n.notification_type IN ('INVITE', 'LEFT', 'JOIN', 'SETTLEMENT', 'REMINDER', 'TRANSACTION') AND n.user_id = #{userId})
           OR
            (n.notification_type IN ('TRANSACTION_CREATE', 'TRANSACTION_UPDATE') AND n.trip_id IN (
                SELECT trip_id FROM trip_member WHERE user_id = #{userId}
            ))
           OR
            (n.notification_type = 'COMPLETED' AND n.user_id = #{userId} AND n.trip_id IN (
                SELECT trip_id FROM trip_member WHERE user_id = #{userId}
            ))
        ORDER BY n.send_at DESC
    </select>

    <!-- 2. 결제 알림 (TRANSACTION) -->
    <select id="findTransactionNotifications" resultType="org.scoula.notification.domain.NotificationVO">
        SELECT n.notification_id AS notificationId,
               n.user_id AS userId,
               n.from_user_id AS fromUserId,
               u.nickname AS fromUserNickname,
               n.trip_id AS tripId,
               t.trip_name AS tripName,
               n.payment_id AS paymentId,
               p.amount AS amount,
               COALESCE(m.merchant_name, p.memo) AS merchantName,
               p.payment_type AS paymentType,
               n.notification_type AS notificationType,
               case
                    WHEN n.notification_type = 'TRANSACTION' AND n.payment_id IS NOT NULL
                        AND EXISTS (
                            SELECT 1 FROM notification n2
                            WHERE n2.payment_id = n.payment_id
                                AND n2.user_id   = n.user_id
                                AND n2.trip_id   = n.trip_id
                                AND n2.notification_type = 'TRANSACTION'
                                AND n2.notification_id &lt; n.notification_id
                        ) THEN 'UPDATE'
                   WHEN n.notification_type = 'TRANSACTION' THEN 'CREATE'
                   ELSE NULL
                   END AS actionType,
               n.is_read AS isRead,
               n.send_at AS sendAt
        FROM notification n
                 LEFT JOIN users u ON n.from_user_id = u.user_id
                 LEFT JOIN trip t ON n.trip_id = t.trip_id
                 LEFT JOIN payment p ON n.payment_id = p.payment_id
                 LEFT JOIN merchant m ON p.merchant_id = m.merchant_id
        WHERE (
            n.notification_type IN ('TRANSACTION_CREATE', 'TRANSACTION_UPDATE')
                AND n.trip_id IN (
                SELECT trip_id FROM trip_member WHERE user_id = #{userId}
            )
            )
           OR (
            n.notification_type = 'TRANSACTION'
                AND n.user_id = #{userId}
            )
        ORDER BY n.send_at DESC
    </select>

    <!-- 3. 정산 알림 (SETTLEMENT, REMINDER, COMPLETED) -->
    <select id="findSettlementNotifications" resultType="org.scoula.notification.domain.NotificationVO">
        SELECT DISTINCT n.notification_id,
                        n.user_id AS userId,
                        n.from_user_id AS fromUserId,
                        u.nickname AS fromUserNickname,
                        n.trip_id AS tripId,
                        t.trip_name AS tripName,
                        n.payment_id AS paymentId,
                        n.notification_type AS notificationType,
                        CASE
                            WHEN n.notification_type = 'SETTLEMENT'
                                AND EXISTS (
                                    SELECT 1
                                    FROM settlement s2
                                    WHERE s2.trip_id = n.trip_id
                                      AND s2.sender_id = n.from_user_id
                                      AND s2.settlement_status = 'COMPLETED'
                                ) THEN 'SEND'
                            ELSE NULL
                            END AS actionType,
                        n.is_read AS isRead,
                        n.send_at AS sendAt
        FROM notification n
                 LEFT JOIN users u ON n.from_user_id = u.user_id
                 LEFT JOIN trip t ON n.trip_id = t.trip_id
                 LEFT JOIN settlement s ON s.trip_id = n.trip_id
                                        AND s.sender_id = n.from_user_id
                                        AND s.receiver_id = n.user_id
        WHERE
            (n.notification_type IN ('SETTLEMENT', 'REMINDER') AND n.user_id = #{userId})
           OR
            (n.notification_type = 'COMPLETED' AND n.user_id = #{userId})
        ORDER BY n.send_at DESC
    </select>

    <!-- 4. 그룹 알림 (INVITE + trip_member.member_status로 JOINED/LEFT 판단) -->
    <select id="findGroupNotifications" resultType="org.scoula.notification.domain.NotificationVO">
        SELECT n.notification_id AS notificationId,
        n.user_id AS userId,
        n.from_user_id AS fromUserId,
        u.nickname AS fromUserNickname,
        n.trip_id AS tripId,
        t.trip_name AS tripName,
        tm.member_status AS memberStatus,
        n.notification_type AS notificationType,
        n.is_read AS isRead,
        n.send_at AS sendAt
        FROM notification n
        LEFT JOIN users u ON n.from_user_id = u.user_id
        LEFT JOIN trip t ON n.trip_id = t.trip_id
        LEFT JOIN trip_member tm ON n.trip_id = tm.trip_id AND tm.user_id = n.from_user_id
        WHERE n.notification_type IN ('INVITE', 'LEFT', 'JOIN')
        AND n.user_id = #{userId}
        ORDER BY n.send_at DESC
    </select>

    <!-- trip_id로 trip 멤버 user_id 리스트 조회 -->
    <select id="findUserIdsByTripId" resultType="int">
        SELECT user_id
        FROM trip_member
        WHERE trip_id = #{tripId}
    </select>

    <!-- 리마인더 알림 대상 조회: 송금 남은 사람, 종료 7일 이내, 미정산 -->
    <select id="findUsersNeedingReminder" resultType="int">
        SELECT DISTINCT s.sender_id
        FROM settlement s
        JOIN trip t ON t.trip_id = s.trip_id
        WHERE s.settlement_status IN ('PENDING','PROCESSING')
            AND s.amount > 0
            AND t.trip_status = 'CLOSED'
            AND DATEDIFF(CURDATE(), t.end_date) BETWEEN 0 AND 7
            AND NOT EXISTS (
                SELECT 1 FROM notification n
                WHERE n.user_id = s.sender_id
                    AND n.trip_id = s.trip_id
                    AND n.notification_type = 'REMINDER'
                    AND n.send_at >= CURDATE()
                    AND n.send_at &lt;  CURDATE() + INTERVAL 1 DAY
            )
    </select>

    <!-- 리마인더 대상의 trip_id 하나 가져오기 -->
    <select id="findTripIdForUserPendingSettlement" parameterType="int" resultType="int">
        SELECT s.trip_id
        FROM settlement s
        JOIN trip t ON t.trip_id = s.trip_id
        WHERE s.sender_id = #{userId}
            AND s.settlement_status IN ('PENDING','PROCESSING')
            AND s.amount > 0
            AND t.trip_status = 'CLOSED'
            AND DATEDIFF(CURDATE(), t.end_date) BETWEEN 0 AND 7
            AND NOT EXISTS (
                SELECT 1 FROM notification n
                WHERE n.user_id = s.sender_id
                    AND n.trip_id = s.trip_id
                    AND n.notification_type = 'REMINDER'
                    AND n.send_at >= CURDATE()
                    AND n.send_at &lt; CURDATE() + INTERVAL 1 DAY
                )
        ORDER BY s.settlement_id DESC
        LIMIT 1
    </select>

    <!-- 해당 trip의 정산 요청자 ID -->
    <select id="findSettlementRequester" parameterType="int" resultType="int">
        SELECT s.sender_id
        FROM settlement s
        WHERE s.trip_id = #{tripId}
          AND s.settlement_status != 'COMPLETED'
        ORDER BY s.settlement_id DESC
            LIMIT 1
    </select>

    <!-- 알림 생성 -->
    <insert id="createNotification" parameterType="org.scoula.notification.domain.NotificationVO">
        INSERT INTO notification (user_id, from_user_id, trip_id, payment_id, notification_type, send_at)
        VALUES (#{userId}, #{fromUserId}, #{tripId}, #{paymentId}, #{notificationType}, NOW())
    </insert>

    <!-- 결제(TRANSACTION) 알림 trip의 모든 멤버에게 알림 생성 -->
    <insert id="createTransactionNotificationForAll" parameterType="org.scoula.notification.domain.NotificationVO">
        INSERT INTO notification (user_id, from_user_id, trip_id, payment_id, notification_type, send_at)
        SELECT tm.user_id, #{fromUserId}, #{tripId}, #{paymentId}, #{notificationType}, NOW()
        FROM trip_member tm
        WHERE tm.trip_id = #{tripId};
    </insert>

    <!-- GROUP_EVENT 알림 생성 -->
    <insert id="createGroupEventNotification" parameterType="org.scoula.notification.domain.NotificationVO">
        INSERT INTO notification (user_id, from_user_id, trip_id, notification_type, send_at)
        SELECT tm.user_id, #{fromUserId}, #{tripId}, #{notificationType}, NOW()
        FROM trip_member tm
        WHERE tm.trip_id = #{tripId}
          AND tm.user_id != #{fromUserId};
    </insert>

    <!-- 송금 완료 알림(SEND) trip 멤버 전체에게 insert (본인 포함) -->
    <insert id="createSendNotificationForAll" parameterType="org.scoula.notification.domain.NotificationVO">
        INSERT INTO notification (user_id, from_user_id, trip_id, notification_type, send_at)
        SELECT tm.user_id, #{fromUserId}, #{tripId}, #{notificationType}, NOW()
        FROM trip_member tm
        WHERE tm.trip_id = #{tripId};
    </insert>

    <!-- COMPLETED 알림 trip의 모든 멤버에게 알림 생성 -->
    <insert id="createCompletedNotification" parameterType="org.scoula.notification.domain.NotificationVO">
        INSERT INTO notification (user_id, from_user_id, trip_id, payment_id, notification_type, send_at)
        SELECT tm.user_id, #{fromUserId}, #{tripId}, #{paymentId}, #{notificationType}, NOW()
        FROM trip_member tm
        WHERE tm.trip_id = #{tripId};
    </insert>

    <!-- 정산 요청 알림 trip의 모든 멤버에게 insert -->
    <insert id="createSettlementNotificationForAll" parameterType="org.scoula.notification.domain.NotificationVO">
        INSERT INTO notification (
            user_id,          -- 알림 받는 유저 (trip 멤버 전체)
            from_user_id,     -- 알림 발생시킨 유저 (그룹장)
            trip_id,          -- 관련 여행
            notification_type,-- 'SETTLEMENT'
            send_at           -- 생성 시간
        )
        SELECT
            tm.user_id,       -- trip의 각 멤버
            #{fromUserId},
            #{tripId},
            #{notificationType},
            NOW()
        FROM trip_member tm
        WHERE tm.trip_id = #{tripId}; -- trip_id 기준으로 멤버 전체 조회
    </insert>

    <!-- 알림 읽음 표시 -->
    <update id="readNotification" parameterType="int">
        update notification
        set is_read = true
        where notification_id = #{notificationId}
    </update>

    <!-- 특정 유저의 FCM 토큰 조회 -->
    <select id="findFcmTokenByUserId" resultType="string">
        SELECT fcm_token
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!--  알림 삭제  -->
    <delete id="deleteByPaymentId">
        DELETE FROM notification
        WHERE payment_id = #{paymentId}
    </delete>
</mapper>